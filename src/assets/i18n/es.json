{
  "language": {
    "btn": {
      "es": "Idioma español",
      "en": "Idioma inglés"
    },
    "flag": {
      "es": "Bandera española",
      "en": "Bandera inglesa"
    }
  },
  "notify": {
    "close": "Cerrar",
    "error": "Ha ocurrido un error en la solicitud.",
    "hero": {
      "add": "El héroe {{id}} ha sido creado correctamente.",
      "edit": "El héroe {{id}} ha sido editado correctamente.",
      "delete": "El héroe {{id}} ha sido borrado correctamente."
    }
  },
  "breadcrumb": {
    "home": "Inicio",
    "hero": {
      "text": "Héroes",
      "add": "Añadir héroe",
      "edit": "Editar héroe"
    }
  },
  "dialog": {
    "delete": {
      "text": "¿Deseas eliminar el elemento {{ id }}?"
    },
    "actions": {
      "cancel": "Cancelar",
      "delete": "Eliminar"
    }
  },
  "filter": {
    "text": "Buscar...",
    "clear": "Limpiar",
    "empty": "No hay datos que coincidan con el filtro."
  },
  "view": {
    "grid": "Vista rejilla",
    "table": "Vista tabla"
  },
  "header": {
    "icon": "Icono W2M",
    "home": "Inicio",
    "heroes": "Héroes"
  },
  "features": {
    "heroes": {
      "fields": {
        "id": "Identificador",
        "name": "Héroe",
        "alter_ego": "Alter ego",
        "publisher": "Editorial",
        "first_appearance": "Estreno",
        "characters": "Personajes",
        "description": "Descripción"
      },
      "add": "Añadir Héroe"
    },
    "actions": {
      "edit": "Editar",
      "delete": "Eliminar",
      "submit": "Enviar"
    },
    "errors": {
      "required": "Campo requerido.",
      "min": "El campo debe tener mínimo '{{min}}' carácteres.",
      "size": "El campo debe tener entre '{{min}}' y '{{max}}' carácteres"
    },
    "home": {
      "creator": "Creado por<br/>{{name}}",
      "title": "Documentacion",
      "subtitle": "A continuación se muestra la documentación del proyecto realizado para la prueba técnica de World2Meet.",
      "functionality": {
        "title": "Funcionalidad",
        "text": "<p>La app se centra en el consumo de la API de SuperHeroes creada mediante Json Server.</p><ul><li><b>Página inicio: </b> <br />Se ha usado para documentar la app.</li><br/><li><b>Página Listado Heroes: </b> <br />Se muestra los superheroes en modo tabla responsive o tarjeta según el modo de visionado que se elija. <br />Se puede realizar diferentes acciones sobre el listado, tales como editar o eliminar un heroe, aparte de poder añadir un nuevo heore. <br />Además se ha añadido un filtro para superheroes que está configurado para, aunque se cambie de página o se refresque, se mantenga la información. <br />Se ha gestionado los evento del filtro de tal manera que si se hace una nueva petición se cancele la anterior para que no se produzca sobrecarga de peticiones al servidor.</li><br/><li><b>Página Añadir/editar Heroes: </b> <br />Se muestra un formulario para editar o añadir un nuevo heroe. <br />Si se edita se conserva el id, el cual está vinculado a una imagen, si se crea un nuevo heroe se debe introducir el id.<br/>El ampo nombre del heroe se crea en mayuscula siempre.</li></ul>"
      },
      "envvar": {
        "title": "Variables de entorno y Rutas relativas",
        "text": "<p>Las <b>variables de entorno</b> se definiden en /env para separar la configuración especifica de los distintos entornos, en este caso solo está el desarrollo.</p><p>Las <b>rutas relativas</b> definidas en tsconfig son para dar mas consistencia al proyecto y entender de manera más facilmente la ubicación de las carpetas sin tener que navegar entre ellas. También por si se tiene que reorganizar el proyecto, no habrá que cambiar la ruta de todos los ficheros a los que afecta sino solo en el fichero tsconfig.</p>"
      },
      "structure": {
        "title": "Estructura",
        "text": "<p>El proyecto se ha ideado para una futura escabilidad, es decir, esta modularizado para que en el futuro se pueda crear nuevas páginas, componentes, servicios, etc. Para ello se ha estructurado de la siguiente manera:<br/><br/></p><ul><li><b>Core:</b> El Core es responsable de mantener los servicios globales. Contiene funciones comunes del proyecto, tales como interceptores, servicios, pipe, etc.</li><br/><li><b>Shared:</b> Se muestra el listado de componentes comunes a la aplicación. Algunos estos componentes forman parte de la estructura o esqueleto, tales como header y loader. Estos componentes tienen la funcionalidad de modificar la estructura de la app, haciendo que la la vista cambie según la necesidad. Otros son componentes que se reutilizan en las diferentes páginas que conforman la app, tales como filter y toolbar. Estos mayormente el estado de la información de la página actual y actualiza sus componente para adaptarlo a ella.</li><br/><li><b>Features:</b> Esta ideado para modular la aplicación, es decir, por cada nuevo módulo se crea una carpeta que contendrá toda la funcionalidad, aquí se situan servicio propios del módulo, interfaces, componentes, modelos y las diferentes páginas usadas, como en este caso listado de heroes y añadir/editar heroes. Si se desea crear un nuevo módulo, tan solo habrá que seguir la estructura y adaptarla la nueva funcionalidad, por ejemplo si queremos gestionar las editoriales.</li></ul>"
      },
      "services": {
        "title": "Servicios",
        "text": "<p>Se ha generado distintos servicios para que los distintos componentespuedan hacer acciones sobre el servicio. Los más imporantes son:</p><ul><li><b>Api:</b> Conecta los componente con la API, en este caso para el módulo Heroes, poder realizar operciones CRUD sobre el.</li><br/><li><b>Loader:</b> Al obtener los datos se debe muestra un loader informando al usuario de que los datos se están cargando.</li><br/><li><b>Notifier:</b> Al crear / modificar / eliminar un elemento o en caso de error, mostrar mensaje informativo al usuario.</li><br/></ul>"
      },
      "languages": {
        "title": "Idiomas",
        "text": "<p>Se ha traducido toda la aplicación para que funcione en dos idiomas: <b>Español</b> e <b>Inglés</b>.</p>"
      },
      "test": {
        "title": "Pruebas",
        "text": "<p>Se ha generado <b>79</b> pruebas para los distintos componentes, servicios, interceptores. Cada una de las pruebas esta diseñada para controlar de manera efectiva el flujo de control y/o funcionalidades.</p>"
      },
      "eslint": {
        "title": "Calidad del código",
        "text": "<p>Se ha usado ESLint para ayudar a detectar que se cumplan unas ciertas normas y criterios para que el código escrito siga unos estándares y estilos de calidad, favoreciendo la escritura de código correcto, coherente y consistente.</p><p>Se ha usado Prettier para dar formato al código y dar mayor calidad.</p>"
      },
      "todo": {
        "title": "Mejoras",
        "text": "<p>Se podría usar el patrón Redux para la administración de estado de los datos y la información que se utilizan en la aplicación. Con ellos hubieramos conseguido centralizar los estados y conseguir que sean atómicos. De esta manera todo componente que este vigilando cierta información del store sea capaz de ver cuando cambia y actuar al respecto.</p>"
      }
    }
  }
}
